<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>The Mockup Blog</title>
    <link>https://themockup.blog</link>
    <atom:link href="https://themockup.blog/index.xml" rel="self" type="application/rss+xml"/>
    <description>Exploring the wonderful world of R
</description>
    <generator>Distill</generator>
    <lastBuildDate>Wed, 05 Aug 2020 00:00:00 +0000</lastBuildDate>
    <item>
      <title>A bar chart 5 ways in ggplot2</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways</link>
      <description>


&lt;div class="container-fluid main-container"&gt;




&lt;div class="fluid-row" id="header"&gt;




&lt;/div&gt;


&lt;div id="credit" class="section level2"&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;&lt;img src="filef26472d7889f_files/figure-html/embed%20tweet-1.png" width="672" /&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/visualisingdata/status/1151443335049023489?s=20"&gt;Andy Kirk&lt;/a&gt; put together &lt;a href="https://www.visualisingdata.com/2019/07/five-ways-to-present-bar-charts/"&gt;Five Ways to present bar charts&lt;/a&gt; as part of his &lt;code&gt;Five ways to...&lt;/code&gt; series back in 2019. The plots below are &lt;em&gt;his&lt;/em&gt; original ideas, just recreated in &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I originally recreated his plots in &lt;code&gt;ggplot2&lt;/code&gt; and published them as a &lt;a href="https://gist.github.com/jthomasmock/2db9db2c534a48af9e2330758be90b8b"&gt;gist&lt;/a&gt; and on &lt;a href="https://twitter.com/thomas_mock/status/1151492858215567362?s=20"&gt;Twitter&lt;/a&gt; in July 2019, stumbled upon it again recently, and thought why not capture it as a proper blog-post!&lt;/p&gt;
&lt;p&gt;Additionally, when I originally made these remakes, &lt;code&gt;ggplot2&lt;/code&gt; required &lt;code&gt;coord_flip()&lt;/code&gt; whereas the most recent version of &lt;code&gt;ggplot2&lt;/code&gt; allows you to natively create horizontal bar charts! I’ve thus changed a little bit of the code from the original gist to reflect the new options in &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Again thank you to Andy Kirk for the prompt! Make sure to check out his &lt;a href="https://www.visualisingdata.com/"&gt;blog&lt;/a&gt; in general for all sorts of great data viz tips.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="source-data" class="section level2"&gt;
&lt;h2&gt;Source Data&lt;/h2&gt;
&lt;p&gt;The data comes from &lt;a href="https://en.wikipedia.org/wiki/List_of_most-streamed_songs_on_Spotify"&gt;Wikipedia&lt;/a&gt;, specifically a list of the most streamed songs on Spotify. We can scrape the table into R w/ &lt;code&gt;rvest&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(rvest)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the libraries loaded, let’s read in the data, pull in the top 100, and add some new columns to use across our charts.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;url &amp;lt;- &amp;quot;https://en.wikipedia.org/wiki/List_of_most-streamed_songs_on_Spotify&amp;quot;

df &amp;lt;- url %&amp;gt;% 
  read_html() %&amp;gt;% 
  html_table(fill = TRUE) %&amp;gt;% 
  .[[1]] %&amp;gt;% 
  set_names(nm = c(&amp;quot;rank&amp;quot;, &amp;quot;song_name&amp;quot;, &amp;quot;artist&amp;quot;, &amp;quot;album&amp;quot;, &amp;quot;streams&amp;quot;, &amp;quot;date_published&amp;quot;)) %&amp;gt;% 
  slice(1:100) %&amp;gt;% 
  mutate(num_rank = parse_number(rank),
         streams_comma = streams,
         streams = parse_number(streams)/1000,
         streams_text = if_else(
           num_rank == 1,
           paste(round(streams, digits = 2), &amp;quot;billion streams&amp;quot;),
           as.character(round(streams, digits = 2))
           ),
         lab_text = glue::glue(&amp;quot;{rank}. {song_name} by {artist}&amp;quot;),
  ) %&amp;gt;% 
  as_tibble()

df %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Rows: 100
Columns: 10
$ rank           &amp;lt;chr&amp;gt; &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot;,…
$ song_name      &amp;lt;chr&amp;gt; &amp;quot;\&amp;quot;Shape of You\&amp;quot;&amp;quot;, &amp;quot;\&amp;quot;Rockstar\&amp;quot;&amp;quot;, &amp;quot;\&amp;quot;One D…
$ artist         &amp;lt;chr&amp;gt; &amp;quot;Ed Sheeran&amp;quot;, &amp;quot;Post Malone featuring 21 Sava…
$ album          &amp;lt;chr&amp;gt; &amp;quot;÷&amp;quot;, &amp;quot;Beerbongs &amp;amp; Bentleys&amp;quot;, &amp;quot;Views&amp;quot;, &amp;quot;Colla…
$ streams        &amp;lt;dbl&amp;gt; 2.570, 1.981, 1.895, 1.830, 1.763, 1.599, 1.…
$ date_published &amp;lt;chr&amp;gt; &amp;quot;6 January 2017&amp;quot;, &amp;quot;15 September 2017&amp;quot;, &amp;quot;5 Ap…
$ num_rank       &amp;lt;dbl&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…
$ streams_comma  &amp;lt;chr&amp;gt; &amp;quot;2,570&amp;quot;, &amp;quot;1,981&amp;quot;, &amp;quot;1,895&amp;quot;, &amp;quot;1,830&amp;quot;, &amp;quot;1,763&amp;quot;,…
$ streams_text   &amp;lt;chr&amp;gt; &amp;quot;2.57 billion streams&amp;quot;, &amp;quot;1.98&amp;quot;, &amp;quot;1.9&amp;quot;, &amp;quot;1.83…
$ lab_text       &amp;lt;glue&amp;gt; &amp;quot;1. \&amp;quot;Shape of You\&amp;quot; by Ed Sheeran&amp;quot;, &amp;quot;2. \&amp;quot;…&lt;/code&gt;&lt;/pre&gt;
&lt;aside&gt;
Note that there is &lt;code&gt;\&lt;/code&gt; in front of the song name and in the lab_text as there we have to escape the &lt;code&gt;"&lt;/code&gt; in each of those strings.
&lt;/aside&gt;
&lt;p&gt;Data is ready to go!&lt;/p&gt;
&lt;/div&gt;
&lt;div id="chart-1-font-height-bars" class="section level1"&gt;
&lt;h1&gt;Chart 1: Font-height bars&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;font_height_bars &amp;lt;- df %&amp;gt;% 
    filter(num_rank &amp;lt;=10) %&amp;gt;% 
    ggplot(aes(y = fct_reorder(lab_text, streams), x = streams)) +
    geom_col(fill = &amp;quot;#7dc8c4&amp;quot;, width = 0.3) +
    theme(text = element_text(family = &amp;quot;Nunito Bold&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 14),
          axis.text = element_text(face = &amp;quot;bold&amp;quot;),
          axis.ticks = element_blank(),
          panel.grid.minor = element_blank(),
          panel.grid.major.y = element_blank(),
          panel.grid.major.x = element_line(color = &amp;quot;lightgrey&amp;quot;)) +
    labs(x = &amp;quot;\nNumber of streams in billions&amp;quot;,
         y = &amp;quot;&amp;quot;) +
    scale_x_continuous(limits = c(0,2.700), expand = c(0, 0),
                       breaks = scales::breaks_pretty(n = 10)
                       )

ggsave(&amp;quot;font_height_bars.png&amp;quot;, font_height_bars, dpi = 300,
       height = 6, width = 14, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways/font_height_bars.png" width="2100" /&gt; # Chart 2: Bars with invisible gridlines&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;invis_gridline &amp;lt;- df %&amp;gt;% 
    filter(num_rank &amp;lt;=10) %&amp;gt;% 
    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +
    geom_col(fill = &amp;quot;#3686d3&amp;quot;, width = .9) +
    geom_vline(data = data.frame(x = seq(0, 2.6, .2)),
               aes(xintercept = x), color = &amp;quot;white&amp;quot;, size = 0.5) +
    theme_minimal() +
    theme(text = element_text(family = &amp;quot;Nunito Bold&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 14),
          axis.text = element_text(face = &amp;quot;bold&amp;quot;),
          axis.ticks = element_blank(),
          panel.grid = element_blank()) +
    labs(x = &amp;quot;\nNumber of streams in billions&amp;quot;,
         y = &amp;quot;&amp;quot;) +
    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),
                       breaks = scales::breaks_pretty(n = 10))

ggsave(&amp;quot;invis_gridline.png&amp;quot;, invis_gridline, dpi = 300,
       height = 6, width = 14, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways/invis_gridline.png" width="2100" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id="chart-3-direct-labels" class="section level1"&gt;
&lt;h1&gt;Chart 3: Direct labels&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;direct_label &amp;lt;- df %&amp;gt;% 
    filter(num_rank &amp;lt;=10) %&amp;gt;% 
    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +
    geom_col(fill = &amp;quot;#303844&amp;quot;, width = .9) +
    geom_text(aes(y = fct_reorder(lab_text, streams), x = streams, label = streams_text),
              color = &amp;quot;white&amp;quot;, hjust = 1, fontface = &amp;quot;bold&amp;quot;, position = position_nudge(x = -.020)) +
    theme_minimal() +
    theme(text = element_text(family = &amp;quot;Nunito Bold&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 16),
          axis.text = element_text(face = &amp;quot;bold&amp;quot;),
          axis.text.x = element_blank(),
          axis.ticks = element_blank(),
          panel.grid = element_blank()) +
    labs(y = &amp;quot;&amp;quot;,
         x = &amp;quot;&amp;quot;) +
    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),
                       breaks = scales::breaks_pretty(n = 10))

ggsave(&amp;quot;direct_label.png&amp;quot;, direct_label, dpi = 300,
       height = 6, width = 14, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways/direct_label.png" width="2100" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id="chart-4-labels-above" class="section level1"&gt;
&lt;h1&gt;Chart 4: Labels above&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;label_above &amp;lt;- df %&amp;gt;% 
    filter(num_rank &amp;lt;=10) %&amp;gt;% 
    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +
    geom_col(fill = &amp;quot;#c2545b&amp;quot;, width = .2) +
    geom_text(aes(x = 0, y = fct_reorder(lab_text, streams),  label = lab_text),
              color = &amp;quot;black&amp;quot;, hjust = 0, position = position_nudge(y = 0.3),
              fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Nunito Bold&amp;quot;, size = 4) +
    geom_text(aes(x = streams, y = fct_reorder(lab_text, streams), label = streams_text),
              color = &amp;quot;#cf7a7f&amp;quot;, hjust = 1, position = position_nudge(x = -.02, y = 0.3),
              fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Nunito Bold&amp;quot;, size = 4) +
    theme_minimal() +
    theme(text = element_text(family = &amp;quot;Nunito Bold&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 14),
          axis.text = element_blank(),
          axis.text.x = element_blank(),
          axis.ticks = element_blank(),
          panel.grid = element_blank()) +
    labs(y = &amp;quot;&amp;quot;,
         x = &amp;quot;&amp;quot;) +
    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),
                       breaks = scales::breaks_pretty(n = 10))

ggsave(&amp;quot;label_above.png&amp;quot;, label_above, dpi = 300,
       height = 6, width = 14, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways/label_above.png" width="2100" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id="chart-5-lollipop" class="section level1"&gt;
&lt;h1&gt;Chart 5: Lollipop&lt;/h1&gt;
&lt;pre class="r"&gt;&lt;code&gt;lollipop_bar &amp;lt;- df %&amp;gt;% 
    filter(num_rank &amp;lt;=10) %&amp;gt;% 
    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +
    geom_col(fill = &amp;quot;grey&amp;quot;, width = .8) +
    geom_point(shape = 21, fill = &amp;quot;orange&amp;quot;, color = &amp;quot;black&amp;quot;, size = 20, stroke = 1) +
    geom_text(aes(x = streams, y = fct_reorder(lab_text, streams), label = streams),
              color = &amp;quot;black&amp;quot;, hjust = 0.5, 
              fontface = &amp;quot;bold&amp;quot;) +
    theme_minimal() +
    theme(text = element_text(family = &amp;quot;Nunito Bold&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 14),
          axis.text = element_text(face = &amp;quot;bold&amp;quot;),
          axis.text.x = element_blank(),
          axis.ticks = element_blank(),
          panel.grid = element_blank(),
          axis.title.x = element_text(hjust = 0)) +
    labs(y = &amp;quot;&amp;quot;,
         x = &amp;quot;Number of streams in billions&amp;quot;) +
    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),
                       breaks = scales::breaks_pretty(n = 10)) +
    NULL

ggsave(&amp;quot;lollipop_bar.png&amp;quot;, lollipop_bar, dpi = 300,
       height = 8, width = 16, units = &amp;quot;in&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways/lollipop_bar.png" width="2400" /&gt;&lt;/p&gt;
&lt;/div&gt;




&lt;/div&gt;

&lt;script&gt;

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


&lt;/script&gt;

&lt;!-- tabsets --&gt;

&lt;script&gt;
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown &gt; .nav-tabs &gt; li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open')
  });
});
&lt;/script&gt;

&lt;!-- code folding --&gt;


&lt;!-- dynamically load mathjax for compatibility with self-contained --&gt;
&lt;script&gt;
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
&lt;/script&gt;

</description>
      <distill:md5>ecab6bbab1b4e3411ac6f6adfc419fe9</distill:md5>
      <category>data visualization</category>
      <category>ggplot2</category>
      <category>tidyverse</category>
      <category>web scraping</category>
      <guid>https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways</guid>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-08-05-a-bar-chart-5-ways/CopyOfpreview.png" medium="image" type="image/png" width="1440" height="617"/>
    </item>
    <item>
      <title>Building a blog with distill</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill</link>
      <description>


&lt;div class="container-fluid main-container"&gt;




&lt;div class="fluid-row" id="header"&gt;




&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;
## Step 6: New post

To create a new post, you can run the following command:  
`distill::create_post(&amp;quot;title of post&amp;quot;)`

Full arguments seen below! I&amp;#39;ll call out two specific things.  

1. `draft` argument: this prevents the post from being included in the site build until you turn it to `FALSE`. This is useful if you&amp;#39;re working on a blogpost over time, or want to come back to finish it later.  
2. `date_prefix`: this adds a date like `2020-08-01-blog-post` to the front of whatever your `blog-post` name is. This is useful as it also creates a folder structure that sorts properly, and prevents name clashes.

Whenever you run the `create_post()` command it will generate a new folder and the basic RMarkdown doc to get started with the arguments you passed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create_post( title, # mandatory author = “auto”, slug = “auto”, # generates a website slug (URL) date_prefix = TRUE, # adds date for sorting draft = FALSE, edit = interactive() )&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Note that a nice overview of the Blog Post Workflow is covered at the [`distill` site](https://rstudio.github.io/distill/blog_workflow.html). This includes collaborating via Git Branches (or using them as previews). I push to my main branch all the time since I&amp;#39;m working solo.

## Step 7: Add to Git

We’re following instructions at: [Chapter 17 Existing project, GitHub last | Happy Git and GitHub for the useR](https://happygitwithr.com/existing-github-last.html). If you&amp;#39;re a Git expert, feel free to use whatever method you like. From my experience setting up a few blogs this is the least painful if you&amp;#39;re NOT a Git expert.

&amp;lt;aside&amp;gt; You could also do the create GitHub and then connect it to RStudio route [Chapter 17 Existing project, GitHub last | Happy Git and GitHub for the useR](https://happygitwithr.com/existing-github-last.html#make-and-connect-a-github-repo-option-2). &amp;lt;/aside&amp;gt;

NOTE: if you don’t have a GitHub PAT, get one now by following these instructions [B GitHub Personal Access Tokens | Happy Git and GitHub for the useR](https://happygitwithr.com/github-pat.html).

This will first use Git locally, and then create a new GitHub repo based off your existing local files.  

Run the `usethis::use_git()` command, which will kick off some questions:  

* Don’t commit just yet (Select `3: Not Now`)  
* Restart RStudio (Select `2: Yes`)  

You will know it all worked when you have the git logo at the top of RStudio  

![Git logo](git.png)

* Click on the Git logo and commit everything, notice we can’t push since 
we haven’t configured GitHub yet  

![Initial commit](inital-commit.png)

* `usethis::use_github()` — this works if you have already configured a GitHub Personal Access Token  
  * Next select https if you don’t have SSH keys  
  * Say `1: yup` to the title and description  
  
Example of what your console commands are and their output seen below!
  

```r
&amp;gt; usethis::use_github()
✓ Setting active project to &amp;#39;/Users/thomasmock/demo-distill-blog&amp;#39;
✓ Checking that current branch is &amp;#39;master&amp;#39;
Which git protocol to use? (enter 0 to exit) 

1: ssh   &amp;lt;-- presumes that you have set up ssh keys
2: https &amp;lt;-- choose this if you don&amp;#39;t have ssh keys (or don&amp;#39;t know if you do)

Selection: 2
● Tip: To suppress this menu in future, put
  `options(usethis.protocol = &amp;quot;https&amp;quot;)`
  in your script or in a user- or project-level startup file, &amp;#39;.Rprofile&amp;#39;.
  Call `usethis::edit_r_profile()` to open it for editing.
● Check title and description
  Name:        demo-distill-blog
  Description: 
Are title and description ok?

1: Yup
2: No way
3: Negative

Selection: 1
✓ Creating GitHub repository
✓ Setting remote &amp;#39;origin&amp;#39; to &amp;#39;https://github.com/jthomasmock/demo-distill-blog.git&amp;#39;
✓ Pushing &amp;#39;master&amp;#39; branch to GitHub and setting remote tracking branch
✓ Opening URL &amp;#39;https://github.com/jthomasmock/demo-distill-blog&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once this is all run, it should open up a new webpage with your fancy new GitHub repo! Mine opened at: &lt;a href="https://github.com/jthomasmock/demo-distill-blog"&gt;GitHub - jthomasmock/demo-distill-blog&lt;/a&gt;.&lt;/p&gt;
&lt;div id="step-8-netlify" class="section level2"&gt;
&lt;h2&gt;Step 8: Netlify&lt;/h2&gt;
&lt;p&gt;Now that we have our files on Github, we’re ready to deploy via Netlify!&lt;/p&gt;
&lt;p&gt;You’ll need to Create an account at netlify if you don’t have one already.&lt;/p&gt;
&lt;div id="once-youre-logged-in" class="section level3"&gt;
&lt;h3&gt;Once you’re logged in:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;First click on import from Git&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/netlify-new-site.png" alt="" /&gt;
&lt;p class="caption"&gt;New site from Git&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;Configure netlify on GitHub&lt;/code&gt;, and follow their instructions to allow access, and then add the selected repository you want to send over (demo-distill-blog for me)
&lt;ul&gt;
&lt;li&gt;Click Save!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/add-demo-repo.png" alt="" /&gt;
&lt;p class="caption"&gt;Add specific repo&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;demo-distill-blog&lt;/code&gt; or whatever your blog’s name is!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure to set the &lt;code&gt;Publish Directory&lt;/code&gt; to &lt;code&gt;_site&lt;/code&gt; (so Netlify can find the knitted HTML content)&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;And then click deploy!&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/publish-directory.png" alt="" /&gt;
&lt;p class="caption"&gt;Make sure to set publish directory to _site&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;You’ll get a fun temporary name (mine was &lt;a href="https://confident-meitner-e6e7dc.netlify.app/"&gt;https://confident-meitner-e6e7dc.netlify.app/&lt;/a&gt;). You can change this with the &lt;code&gt;Domain Settings&lt;/code&gt; to &lt;code&gt;some-name.netlify.app&lt;/code&gt; or even purchase a custom domain like I did for example &lt;code&gt;themockup.blog&lt;/code&gt; or what Sharla Gelfand did with &lt;code&gt;sharla.party&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now your website should be up and running! If you don’t see a site (it 404s), then I would check to make sure you set the &lt;code&gt;Publish Director&lt;/code&gt; to &lt;code&gt;_site&lt;/code&gt;, otherwise it won’t know where to find the actual HTML content.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="step-9-blog-post-workflows" class="section level2"&gt;
&lt;h2&gt;Step 9: Blog post workflows&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Workflow difference: Furthermore, website pages and root pages of blogs are re-rendered when the site is rebuilt but blog articles are not. Each blog article has to be rendered on its own, with intent. Why? Given that R package upgrades have a tendency to break older code, continuously re-rendering old posts is nearly impossible to do without errors, especially over longer periods of time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means you can “Build Site” frequently locally to check out how things work. This is personally the workflow I prefer vs having to commit the output to GitHub or a GitHub branch just to see the preview. You can also knit individual blog posts and they will adapt to your theme, so you can again test local changes whenever you’d like!&lt;/p&gt;
&lt;p&gt;To get things into “production” once you have set up Netlify, you’ll just need to knit the new blog post, then commit and push to GitHub.&lt;/p&gt;
&lt;p&gt;You can use command line git or the git integration in RStudio.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/git.png" alt="" /&gt;
&lt;p class="caption"&gt;Example of git in RStudio&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Basic idea is click commit and then push.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/inital-commit.png" alt="" /&gt;
&lt;p class="caption"&gt;Example of a commit&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="next-steps" class="section level1"&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;If this guide didn’t provide enough detail, make sure to check out the &lt;a href="https://rstudio.github.io/distill/blog_workflow.html"&gt;Blog Post Workflow&lt;/a&gt; that goes into specific examples, like importing posts from elsewhere, changing URLs, updating old posts, etc.&lt;/p&gt;
&lt;p&gt;Now that you have a website running you can either leave it exactly as it is formatted, and just add new posts or you can do a little bit of customization to the “About Me”, Home page, etc.&lt;/p&gt;
&lt;p&gt;A lot of options are already covered at &lt;a href="https://rstudio.github.io/distill/blog.html#next-steps"&gt;Distill for R Markdown: Creating a Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want Twitter cards to show up with your images, you need to add a &lt;code&gt;preview: some_img_name.png&lt;/code&gt; argument to the YAML header for each post.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;If you define a custom domain you’ll need to change the &lt;a href="https://rstudio.github.io/distill/blog.html#Configuration"&gt;&lt;code&gt;base_url&lt;/code&gt; at the &lt;code&gt;_site.yml&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="customize-appearance" class="section level2"&gt;
&lt;h2&gt;Customize Appearance&lt;/h2&gt;
&lt;p&gt;Probably of most interest to folks is customizing the appearance of the blog.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In general the strategy you should use is to inspect parts of the website for the class names and then you can apply CSS to change it&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;A nice overview of the “Inspect” tool is covered &lt;a href="https://developers.google.com/web/tools/chrome-devtools/open"&gt;here&lt;/a&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;HTML/CSS classes and selectors are covered in the Mozilla docs &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors"&gt;here&lt;/a&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;To use a custom CSS file, you’ll need to change the output in &lt;code&gt;_site.yml&lt;/code&gt; to include the below:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="r"&gt;&lt;code&gt;output: 
  distill::distill_article:
    css: styles.css&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I keep my &lt;code&gt;styles.css&lt;/code&gt; file at the same level as my &lt;code&gt;_site.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;div id="example-changes" class="section level3"&gt;
&lt;h3&gt;Example changes&lt;/h3&gt;
&lt;p&gt;You’ll need to store all of these in your &lt;code&gt;styles.css&lt;/code&gt; file, and note that some of them depend on other changes - specifically to use custom fonts you ALSO have to import the custom fonts!&lt;/p&gt;
&lt;div id="bold-silver-title-pink-background" class="section level4"&gt;
&lt;h4&gt;Bold silver title, pink background&lt;/h4&gt;
&lt;pre class="r"&gt;&lt;code&gt;.distill-site-nav {
  color: #C0C0C0; 
  background-color: #FF1493;
  font-size: 20px;
  font-weight: 900;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="want-entire-webpage-to-be-pink" class="section level4"&gt;
&lt;h4&gt;Want entire webpage to be “pink”?&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;body {
  background-color: #FF1493;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="change-hover-color-in-nav-bar" class="section level4"&gt;
&lt;h4&gt;Change hover color in nav bar&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;.distill-site-nav a:hover {
  color: #383838;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="change-header-font-or-color" class="section level4"&gt;
&lt;h4&gt;Change header font or color&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/* Change appearance of headers */
h1, h2, h3, h4, h5 {
  font-family: &amp;#39;Fira Mono&amp;#39;, sans-serif;
  color: color: #383838;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="import-custom-fonts-from-google" class="section level4"&gt;
&lt;h4&gt;Import custom fonts from Google&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/* Import fonts from Google&amp;#39;s API */
@import url(&amp;#39;https://fonts.googleapis.com/css2?family=Lato&amp;#39;);
@import url(&amp;#39;https://fonts.googleapis.com/css2?family=Fira+Mono&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="use-those-fonts-throughout" class="section level4"&gt;
&lt;h4&gt;Use those fonts throughout&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/* Use specific font in the body of the text */
html, body, p {
  
  font-family: &amp;#39;Lato&amp;#39;, sans-serif;
  font-weight: 200;
  line-height: 1.3; 
  font-size: 1.0em;
  color: #333333;
  font-style: normal;
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="change-in-line-code" class="section level4"&gt;
&lt;h4&gt;Change in-line code&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;/* Change the appearance of in-line code chunks */
code {
  font-family: &amp;#39;Fira Mono&amp;#39;, sans-serif;
  color: #383838;
  background: #F5F5F5;
  font-weight: 400;
  font-size: 0.9em;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="change-code-chunk-colors" class="section level4"&gt;
&lt;h4&gt;Change code chunk colors&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;d-code {
  background: grey;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;




&lt;/div&gt;

&lt;script&gt;

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


&lt;/script&gt;

&lt;!-- tabsets --&gt;

&lt;script&gt;
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown &gt; .nav-tabs &gt; li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open')
  });
});
&lt;/script&gt;

&lt;!-- code folding --&gt;


&lt;!-- dynamically load mathjax for compatibility with self-contained --&gt;
&lt;script&gt;
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
&lt;/script&gt;

</description>
      <distill:md5>b00f40f4a8cfa2a615d492eaa38f62d8</distill:md5>
      <category>rmarkdown</category>
      <category>tidyverse</category>
      <guid>https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill</guid>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/modern.jpeg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Meta RMarkdown - Taxonomy and Use cases</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-07-25-meta-rmarkdown</link>
      <description>


&lt;div class="container-fluid main-container"&gt;




&lt;div class="fluid-row" id="header"&gt;




&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;img src="https://media.giphy.com/media/L7TQTflWNF1YI/giphy.gif" alt="" /&gt;
&lt;p class="caption"&gt;Gif of a machine creating jelly rolls&lt;/p&gt;
&lt;/div&gt;
&lt;div id="rmarkdown-for-templating" class="section level2"&gt;
&lt;h2&gt;RMarkdown for Templating&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: Don’t repeat yourself, generate &lt;strong&gt;input&lt;/strong&gt; templates or &lt;strong&gt;output&lt;/strong&gt; documents from code.&lt;/p&gt;
&lt;p&gt;Using R Markdown for templating is normally thought of for &lt;code&gt;knitr::render()&lt;/code&gt; + parameters, but there’s additional techniques to solve specific problems that don’t fit neatly into paramaterized reports as well.&lt;/p&gt;
&lt;div id="knitting-w-knitrender" class="section level3"&gt;
&lt;h3&gt;&lt;a href="https://rmarkdown.rstudio.com/docs/reference/render.html"&gt;Knitting w/ &lt;code&gt;knit::render()&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is the first step towards using a template, and lets you generate R Markdown outputs programatically with code. It can be coupled with parameters or with other arguments for outputs locations, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="looping-outputs" class="section level3"&gt;
&lt;h3&gt;Looping outputs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is really still focused at data products, but programmatically building up portions WITHIN a document.
&lt;ul&gt;
&lt;li&gt;In this example, I’m taking a single function and using &lt;code&gt;purrr::walk()&lt;/code&gt; to generate new outputs from a template within the R Markdown report.&lt;/li&gt;
&lt;li&gt;Note that for the chunk that outputs the repeated portions, you have to set &lt;code&gt;results="asis"&lt;/code&gt; in the chunk option.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Minimal example below with the &lt;a href="https://github.com/allisonhorst/palmerpenguins"&gt;&lt;code&gt;palmerpenguins&lt;/code&gt; dataset&lt;/a&gt;. I’ve included the code as an image placed below, as I’m essentially nesting R Markdown chunks inside R Markdown chunks in a R Markdown-based website. Full copy-pastable code at: &lt;a href="https://git.io/JJBcC"&gt;https://git.io/JJBcC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that I’m writing one function and calling it &lt;code&gt;n&lt;/code&gt; times, it would loop across all the data based on the different inputs.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-07-25-meta-rmarkdown/loop-code.png" alt="" /&gt;
&lt;p class="caption"&gt;Loop Code in RMD&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Which generates the following document:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img src="https://themockup.blog/posts/2020-07-25-meta-rmarkdown/palmer-penguins.png" alt="" /&gt;
&lt;p class="caption"&gt;Loop Output in RMD&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="whisker" class="section level3"&gt;
&lt;h3&gt;&lt;a href="https://github.com/edwindj/whisker"&gt;whisker&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;whisker&lt;/code&gt; is a templating engine for R conforming to the Mustache specification.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;It uses &lt;code&gt;glue&lt;/code&gt; style syntax to add data to templates either in memory or to an output file, where my mental model is it is &lt;code&gt;glue&lt;/code&gt; for documents rather than strings.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;You can include templates from all sorts of inputs, like R files, R Markdown, markdown or plain text.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;These templates can be local directories, or stored in the &lt;a href="https://r-pkgs.org/inst.html"&gt;&lt;code&gt;inst&lt;/code&gt;&lt;/a&gt; directory of an R package.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Lastly, these can also generate outputs in the same format, eg you can create templates/outputs for R, R Markdown or other plain-text formats!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Minimal &lt;code&gt;whisker&lt;/code&gt; example below:&lt;/p&gt;
&lt;p&gt;First, some input data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data &amp;lt;- list(
  name = &amp;quot;Chris&amp;quot;, 
  value = 10000, 
  taxed_value = 10000 - (10000 * 0.4), 
  in_ca = TRUE
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then a template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template &amp;lt;-
&amp;#39;Hello {{name}}
You have just won ${{value}}!
{{#in_ca}}
Well, ${{taxed_value}}, after taxes.
{{/in_ca}}&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, fill the template!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;text &amp;lt;- whisker.render(template, data)
cat(text)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# Output
Hello Chris
You have just won $10000!
Well, $6000, after taxes.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;code&gt;whisker&lt;/code&gt; natively to generate the readme files for each week’s &lt;code&gt;#TidyTuesday&lt;/code&gt; submission. Separate blog-post to come for that!&lt;/p&gt;
&lt;/div&gt;
&lt;div id="usethisuse_template" class="section level3"&gt;
&lt;h3&gt;&lt;code&gt;usethis::use_template()&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Alternatively to natively using &lt;code&gt;whisker&lt;/code&gt; &lt;a href="https://usethis.r-lib.org/reference/use_template.html"&gt;usethis::use_template()&lt;/a&gt; provides a more ready to use function, and uses &lt;code&gt;whisker&lt;/code&gt; internally.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_template()&lt;/code&gt; Used as the engine for a templating function in other packages.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sharla Gelfand, the “Queen of Reproducible Reporting”, put together lots of material using the &lt;code&gt;usethis::use_template()&lt;/code&gt; workflow in their work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sharla.party/post/usethis-for-reporting/"&gt;Sharla Gelfand’s &lt;code&gt;use_template()&lt;/code&gt; blogpost&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;In short, they turned an annual report from a mess of copy-pasting and manual work into a fast, streamlined, reproducible, and easily repeatable workflow using R, R Markdown, and &lt;code&gt;usethis::use_template()&lt;/code&gt;.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rstudio.com/resources/rstudioconf-2020/don-t-repeat-yourself-talk-to-yourself-repeated-reporting-in-the-r-universe/"&gt;Recording&lt;/a&gt; of their presentation on the same topic&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sharstudioconf.netlify.app/"&gt;Slides&lt;/a&gt; for that presentation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="fin" class="section level3"&gt;
&lt;h3&gt;Fin&lt;/h3&gt;
&lt;p&gt;So that’s an overview of my approach to &lt;strong&gt;sharing knowledge&lt;/strong&gt; around R Markdown, and like Alison said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But remember: there is no one way to learn R Markdown, and no one way to teach it either. I love seeing the creativity of the community when introducing the R Markdown family - so keep them coming!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;




&lt;/div&gt;

&lt;script&gt;

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


&lt;/script&gt;

&lt;!-- tabsets --&gt;

&lt;script&gt;
$(document).ready(function () {
  window.buildTabsets("TOC");
});

$(document).ready(function () {
  $('.tabset-dropdown &gt; .nav-tabs &gt; li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open')
  });
});
&lt;/script&gt;

&lt;!-- code folding --&gt;


&lt;!-- dynamically load mathjax for compatibility with self-contained --&gt;
&lt;script&gt;
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
&lt;/script&gt;

</description>
      <distill:md5>6e9b990cdbd67ed6c093ba123a2728fe</distill:md5>
      <category>rmarkdown</category>
      <category>tidyverse</category>
      <guid>https://themockup.blog/posts/2020-07-25-meta-rmarkdown</guid>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-07-25-meta-rmarkdown/tools-flat.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Client-side interactivity - do more with Crosstalk</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-05-29-client-side-interactivity-do-more-with-crosstalk</link>
      <description>Because sharing data is caring</description>
      <category>NFL</category>
      <category>tidyverse</category>
      <category>crosstalk</category>
      <category>plotly</category>
      <category>tables</category>
      <category>reactable</category>
      <guid>https://themockup.blog/posts/2020-05-29-client-side-interactivity-do-more-with-crosstalk</guid>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-05-29-client-side-interactivity-do-more-with-crosstalk/distill-preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>Easily parsing JSON in R with jsonlite and purrr</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite</link>
      <description>It's turtles all the way down...</description>
      <category>NFL</category>
      <category>tidyverse</category>
      <category>JSON</category>
      <category>web scraping</category>
      <category>API</category>
      <category>purrr</category>
      <guid>https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite</guid>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-05-22-parsing-json-in-r-with-jsonlite/distill-preview.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>gt - a (G)rammar of (T)ables</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-05-16-gt-a-grammer-of-tables</link>
      <description>Not to be confused with a Game of Thrones</description>
      <category>NFL</category>
      <category>tidyverse</category>
      <category>tables</category>
      <guid>https://themockup.blog/posts/2020-05-16-gt-a-grammer-of-tables</guid>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-05-16-gt-a-grammer-of-tables/distill-preview.png" medium="image" type="image/png" width="1096" height="805"/>
    </item>
    <item>
      <title>reactable - An Interactive Tables Guide</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-05-13-reactable-tables-the-rest-of-the-owl</link>
      <description>Part 2: How to draw the rest of the owl.</description>
      <category>NFL</category>
      <category>tidyverse</category>
      <category>tables</category>
      <guid>https://themockup.blog/posts/2020-05-13-reactable-tables-the-rest-of-the-owl</guid>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-05-13-reactable-tables-the-rest-of-the-owl/distill-preview.png" medium="image" type="image/png" width="1093" height="652"/>
    </item>
    <item>
      <title>QB Salaries vs Playoff Appearances</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-05-13-qb-salaries-vs-playoff-appearances</link>
      <description>Interactive tables make bad takes more fun.</description>
      <category>NFL</category>
      <category>tidyverse</category>
      <category>tables</category>
      <guid>https://themockup.blog/posts/2020-05-13-qb-salaries-vs-playoff-appearances</guid>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-05-13-qb-salaries-vs-playoff-appearances/distill-preview.png" medium="image" type="image/png" width="1093" height="652"/>
    </item>
    <item>
      <title>Flipping tibbles for many models</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-05-01-tidy-long-models</link>
      <description>Pivoting data from wide to long to run many models at once</description>
      <category>espnscrapeR</category>
      <category>NFL</category>
      <category>tidyverse</category>
      <category>tidymodels</category>
      <guid>https://themockup.blog/posts/2020-05-01-tidy-long-models</guid>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-05-01-tidy-long-models/distill-preview.png" medium="image" type="image/png" width="2400" height="2400"/>
    </item>
    <item>
      <title>Bigger, nflfastR, dbplyr</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2019-04-28-nflfastr-dbplyr-rsqlite</link>
      <description>Doing more with dplyr and SQL</description>
      <category>NFL</category>
      <category>nflscrapR</category>
      <category>nflfastR</category>
      <category>SQL</category>
      <category>tidyverse</category>
      <guid>https://themockup.blog/posts/2019-04-28-nflfastr-dbplyr-rsqlite</guid>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <media:content url="https://images.unsplash.com/photo-1566577739112-5180d4bf9390?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1526&amp;q=80" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>Beer and pdftools - a vignette</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-04-03-beer-and-pdftools-a-vignette</link>
      <description>A guide to extracting tables from many PDFs using the pdftools package</description>
      <guid>https://themockup.blog/posts/2020-04-03-beer-and-pdftools-a-vignette</guid>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Crossing 10,000 - Tidy simulation</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2020-04-03-crossing-10000-tidy-simulation</link>
      <description>Tidy simulation with dice rolls</description>
      <category>tidyverse</category>
      <category>purrr</category>
      <category>simulation</category>
      <category>probability</category>
      <guid>https://themockup.blog/posts/2020-04-03-crossing-10000-tidy-simulation</guid>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      <media:content url="https://themockup.blog/posts/2020-04-03-crossing-10000-tidy-simulation/distill-preview.png" medium="image" type="image/png" width="5400" height="3600"/>
    </item>
    <item>
      <title>Add a logo to your plot</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2019-01-09-add-a-logo-to-your-plot</link>
      <description>Put a bird on it - Portlandia.</description>
      <category>magick</category>
      <category>data visualization</category>
      <category>ggplot2</category>
      <guid>https://themockup.blog/posts/2019-01-09-add-a-logo-to-your-plot</guid>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      <media:content url="https://images.pexels.com/photos/1564506/pexels-photo-1564506.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940" medium="image" type="text/plain"/>
    </item>
    <item>
      <title>TidyTuesday enhancements</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2019-01-02-tidytuesday-enhancements</link>
      <description>Making #TidyTuesday better.</description>
      <category>TidyTuesday</category>
      <category>tidyverse</category>
      <category>Automation</category>
      <guid>https://themockup.blog/posts/2019-01-02-tidytuesday-enhancements</guid>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      <media:content url="https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/tt_logo.png" medium="image" type="image/png"/>
    </item>
    <item>
      <title>TidyTuesday</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2018-12-11-tidytuesday-a-weekly-social-data-project-in-r</link>
      <description>A weekly social data project in R</description>
      <category>TidyTuesday</category>
      <category>tidyverse</category>
      <category>Community</category>
      <guid>https://themockup.blog/posts/2018-12-11-tidytuesday-a-weekly-social-data-project-in-r</guid>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      <media:content url="https://i.imgur.com/AXfD3Fk.png" medium="image" type="image/png"/>
    </item>
    <item>
      <title>Functional Progamming in R with purrr</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2018-12-11-functional-progamming-in-r-with-purrr</link>
      <description>Minimizing repetition with further replication</description>
      <category>purrr</category>
      <category>tidyverse</category>
      <category>statistics</category>
      <guid>https://themockup.blog/posts/2018-12-11-functional-progamming-in-r-with-purrr</guid>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      <media:content url="https://i.imgur.com/LIvMxbN.jpg" medium="image" type="image/jpeg"/>
    </item>
    <item>
      <title>A Gentle Guide to Tidy Statistics in R</title>
      <dc:creator>Thomas Mock</dc:creator>
      <link>https://themockup.blog/posts/2018-12-10-a-gentle-guide-to-tidy-statistics-in-r</link>
      <description>Working your way through a basic analysis</description>
      <guid>https://themockup.blog/posts/2018-12-10-a-gentle-guide-to-tidy-statistics-in-r</guid>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      <media:content url="https://i.imgur.com/o6k6Rne.jpg" medium="image" type="image/jpeg"/>
    </item>
  </channel>
</rss>
